// index.js
require("dotenv").config();
const express = require("express");
const OpenAI = require("openai");
const fetch = require("node-fetch"); // tulevaa ElevenLabs-k√§ytt√∂√§ varten

const app = express();
app.use(express.json());
app.use(express.static("public")); // n√§ytt√§√§ public/index.html -tiedoston

// OpenAI-yhteys
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Testi-endpoint (n√§kyy selaimessa Railwayn domainissa)
app.get("/", (req, res) => {
  res.send("ü§ñ Niilo on hereill√§! K√§yt√§ POST /chat l√§hett√§√§ksesi viestej√§.");
});

// P√§√§asiallinen botti-endpoint (frontendin /chat kutsuu t√§t√§)
app.post("/chat", async (req, res) => {
  const { message } = req.body;

  if (!message) {
    return res.status(400).json({ error: "Viesti puuttuu." });
  }

  try {
    // Pyydet√§√§n vastaus OpenAI:lta
    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `
Sin√§ olet Niilo, Novera AI:n asiakaspalvelija ja br√§ndin √§√§ni.
Olet rento, ammattimainen ja helposti l√§hestytt√§v√§ nuori mies (noin 28‚Äì30v),
joka puhuu selke√§sti ja nykyaikaisesti.

Ty√∂skentelet yrityksess√§ nimelt√§ Novyra Technologies,
ja edustat Novyra AI -teko√§lyratkaisuja.

Te tarjoatte asiakkaille mm:
- teko√§lypohjaisia chatbotteja yrityksille
- automaatiopalveluita (esim. ajanvarausj√§rjestelm√§t)
- yksinkertaisia mutta moderneja verkkosivuja
- ja tulevaisuudessa my√∂s Instagram-integraatioita,
  joissa botti voi keskustella tai kommentoida postauksia.

Tavoitteesi on aina auttaa asiakkaita ymm√§rt√§m√§√§n, mit√§ palveluja
Novyra tarjoaa ja vastata yst√§v√§llisesti mutta asiantuntevasti.
Jos k√§ytt√§j√§ puhuu englanniksi, vaihda sujuvasti englantiin.
          `,
        },
        { role: "user", content: message },
      ],
    });

    // Otetaan teko√§lyn vastaus talteen
    const reply = completion.choices[0].message.content;

    // L√§hetet√§√§n vastaus frontendiin
    res.json({ reply });
  } catch (error) {
    console.error("Virhe OpenAI-yhteydess√§:", error);
    res.status(500).json({ error: "Virhe OpenAI-yhteydess√§." });
  }
});

// K√§ynnistet√§√§n palvelin
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Niilo-palvelin k√§ynniss√§ portissa ${PORT}`);
});

