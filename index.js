// index.js (ESM-versio)
import dotenv from "dotenv";
import express from "express";
import OpenAI from "openai";
import fetch from "node-fetch";
import { ElevenLabsClient } from "elevenlabs";

dotenv.config();

const app = express();
app.use(express.json());
app.use(express.static("public")); // nÃ¤yttÃ¤Ã¤ frontendin

// Alustetaan OpenAI ja ElevenLabs
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const eleven = new ElevenLabsClient({
  apiKey: process.env.ELEVEN_API_KEY,
});

// Juuri tÃ¤mÃ¤ nÃ¤kyy Railwayn domainissa
app.get("/", (req, res) => {
  res.send("ğŸ¤– Niilo on hereillÃ¤! KÃ¤ytÃ¤ POST /chat lÃ¤hettÃ¤Ã¤ksesi viestin.");
});

// PÃ¤Ã¤asiallinen chat-endpoint
app.post("/chat", async (req, res) => {
  const { message } = req.body;

  if (!message) {
    return res.status(400).json({ error: "Viesti puuttuu." });
  }

  try {
    // GPT-viesti Niilolle
    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `
SinÃ¤ olet Niilo, Novyra AI:n asiakaspalvelija ja brÃ¤ndin Ã¤Ã¤ni.
Olet rento, ammattimainen ja helposti lÃ¤hestyttÃ¤vÃ¤ noin 29-vuotias mies.
Puhut sujuvasti suomea ja vaihdat tarvittaessa englantiin.

TyÃ¶skentelet yrityksessÃ¤ nimeltÃ¤ Novyra Technologies,
ja edustat sen tekoÃ¤lyalustaa, nimeltÃ¤ Novyra AI.

Yrityksenne tarjoaa asiakkaille mm.:
- tekoÃ¤lypohjaisia chatbotteja yrityksille
- automaatiopalveluita (esim. ajanvarausjÃ¤rjestelmÃ¤t)
- yksinkertaisia mutta moderneja verkkosivuja
- tulevaisuudessa myÃ¶s Instagram-integraatioita ja Ã¤lykkÃ¤itÃ¤ kommentointibotteja

Tavoitteesi on auttaa asiakkaita ymmÃ¤rtÃ¤mÃ¤Ã¤n, mitÃ¤ palveluita tarjoatte,
ja vastata ystÃ¤vÃ¤llisesti mutta asiantuntevasti.
KÃ¤ytÃ¤ lÃ¤mpimÃ¤n ystÃ¤vÃ¤llistÃ¤ tyyliÃ¤ ja persoonallista otetta.`,
        },
        { role: "user", content: message },
      ],
    });

    const reply = completion.choices[0].message.content;

    // ğŸ”Š Muutetaan vastaus Ã¤Ã¤neksi ElevenLabsissa
    const voiceId = process.env.VOICE_ID; // lisÃ¤Ã¤ oma voice id .env:iin
    const audioResponse = await eleven.textToSpeech.convert(voiceId, {
      model_id: "eleven_multilingual_v2",
      text: reply,
      voice_settings: { stability: 0.5, similarity_boost: 0.8 },
    });

    // Muutetaan Ã¤Ã¤nidata base64:ksi
    const audioBuffer = Buffer.from(await audioResponse.arrayBuffer());
    const audioBase64 = audioBuffer.toString("base64");

    res.json({ reply, audio: audioBase64 });
  } catch (err) {
    console.error("Virhe:", err);
    res.status(500).json({ error: "Virhe GPT- tai Ã¤Ã¤niresurssissa." });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`ğŸš€ Niilo kÃ¤ynnissÃ¤ portissa ${PORT}`));

